setwd("C:/Users/Khadija Oualla/Desktop/M1_SSD/Logiciel Spécialisé R/Création de Package/autoEDA")
library(e1071) # Pour "Asymétrie" et "Aplatissement"
library(class)  # Pour KNN
library(ggplot2)  # Pour la visualisation
library(viridis)
library(rpart)
library( rpart.plot)
library(shiny)
library(shinydashboard)
library(reactable)
library(shinythemes)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(title = "Tableau de bord EDA"),
dashboardSidebar(
sidebarMenu(
menuItem("Charger Données", tabName = "loadData", icon = icon("upload")),
menuItem("Résumé Statistique", tabName = "summary", icon = icon("line-chart")),
menuItem("Visualisation", tabName = "visualization", icon = icon("bar-chart")),
menuItem("Machine Learning", icon = icon("cogs"),
menuSubItem("Arbre de Décision", tabName = "decisionTree"),
menuSubItem("KNN", tabName = "knn")
)
)
),
dashboardBody(
tags$head(includeCSS("styles.css")),
tabItems(
# Onglet pour charger les données
tabItem(tabName = "loadData",
fileInput("file1", "Choisissez le fichier CSV"),
selectInput("nrows", "Nombre de lignes à afficher:",
choices = c("5" = 5, "10" = 10, "20" = 20, "Tout" = "All")),
reactableOutput("dataTable")
),
# Onglet pour le résumé statistique
tabItem(tabName = "summary",
fluidRow(
uiOutput("variableSelect"),  # Sélection dynamique de la variable
actionButton("calcButton", "Calculer")
),
tableOutput("statSummary")
),
# Onglet pour la visualisation
tabItem(tabName = "visualization",
fluidRow(
column(4,
selectInput("graphType", "Type de graphique:",
choices = c("Histogramme" = "hist", "Boîte à moustaches" = "boxplot", "Diagramme en bâtons" = "bar")),
uiOutput("graphVariableSelect")  # Mise à jour pour utiliser uiOutput
),
column(8,
plotOutput("graphOutput")
)
)
),
tabItem(tabName = "decisionTree",
h2("Arbre de Décision"),
uiOutput("targetVariableSelect"),
uiOutput("predictorVariablesSelect"),
actionButton("buildTree", "Construire l'Arbre de Décision"),
plotOutput("treePlot")
),
tabItem(tabName = "knn",
h2("K-Nearest Neighbors (KNN)"),
uiOutput("knnTargetVariableSelect"),
uiOutput("knnPredictorVariablesSelect"),
numericInput("kValue", "Nombre de voisins (k)", value = 5, min = 1),
actionButton("runKnn", "Exécuter KNN"),
plotOutput("knnPlot")
)
)
)
)
runApp('C:/Users/Khadija Oualla/Desktop/M1_SSD/Logiciel Spécialisé R/Package final/ShinyExec/inst/ShinyExec_application')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(devtools)
setwd("/path/to/2_creation_package_R_de_son_application/ShinyExec")
build()
library("ShinyExec")
shiny_application()
library(e1071) # Pour "Asymétrie" et "Aplatissement"
library(class)  # Pour KNN
library(ggplot2)  # Pour la visualisation
library(viridis)
library(rpart)
library( rpart.plot)
library(shiny)
library(shinydashboard)
library(reactable)
library(shinythemes)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(title = "Tableau de bord EDA"),
dashboardSidebar(
sidebarMenu(
menuItem("Charger Données", tabName = "loadData", icon = icon("upload")),
menuItem("Résumé Statistique", tabName = "summary", icon = icon("line-chart")),
menuItem("Visualisation", tabName = "visualization", icon = icon("bar-chart")),
menuItem("Machine Learning", icon = icon("cogs"),
menuSubItem("Arbre de Décision", tabName = "decisionTree"),
menuSubItem("KNN", tabName = "knn")
)
)
),
dashboardBody(
tags$head(includeCSS("styles.css")),
tabItems(
# Onglet pour charger les données
tabItem(tabName = "loadData",
fileInput("file1", "Choisissez le fichier CSV"),
selectInput("nrows", "Nombre de lignes à afficher:",
choices = c("5" = 5, "10" = 10, "20" = 20, "Tout" = "All")),
reactableOutput("dataTable")
),
# Onglet pour le résumé statistique
tabItem(tabName = "summary",
fluidRow(
uiOutput("variableSelect"),  # Sélection dynamique de la variable
actionButton("calcButton", "Calculer")
),
tableOutput("statSummary")
),
# Onglet pour la visualisation
tabItem(tabName = "visualization",
fluidRow(
column(4,
selectInput("graphType", "Type de graphique:",
choices = c("Histogramme" = "hist", "Boîte à moustaches" = "boxplot", "Diagramme en bâtons" = "bar")),
uiOutput("graphVariableSelect")  # Mise à jour pour utiliser uiOutput
),
column(8,
plotOutput("graphOutput")
)
)
),
tabItem(tabName = "decisionTree",
h2("Arbre de Décision"),
uiOutput("targetVariableSelect"),
uiOutput("predictorVariablesSelect"),
actionButton("buildTree", "Construire l'Arbre de Décision"),
plotOutput("treePlot")
),
tabItem(tabName = "knn",
h2("K-Nearest Neighbors (KNN)"),
uiOutput("knnTargetVariableSelect"),
uiOutput("knnPredictorVariablesSelect"),
numericInput("kValue", "Nombre de voisins (k)", value = 5, min = 1),
actionButton("runKnn", "Exécuter KNN"),
plotOutput("knnPlot")
)
)
)
)
runApp('C:/Users/Khadija Oualla/Desktop/M1_SSD/Logiciel Spécialisé R/Package final/ShinyExec/inst/ShinyExec_application')
devtools::build()
install.packages("https://raw.githubusercontent.com/OUALLAK/ShinyExec/main/ShinyExec_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("https://raw.githubusercontent.com/OUALLAK/ShinyExec/main/ShinyExec_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("https://raw.githubusercontent.com/OUALLAK/ShinyExec/main/ShinyExec_0.1.0.tar.gz", repos = NULL, type = "source")
