# Trace la distribution binomiale en segments horizontaux
plot(X, Y1, type='h', main='Poisson et Binomiale', add=TRUE, col='red')
# Trace la distribution normale en segments horizontaux
lines(X, Y2, type='h', col='green')
n = 50
p = 0.4
X <- 0:n
# Calcul des probabilités pour la distribution binomiale et la distribution normale
Y1 <- dbinom(X, n, p)  # Probabilités de la distribution binomiale
Y2 <- dnorm(X, n*p, sqrt(n*p*(1-p)))  # Probabilités de la distribution normale
# Trace la distribution binomiale en segments horizontaux
plot(X, Y1, type='h', main='Poisson et Binomiale', add=TRUE, col='red')
# Trace la distribution normale en segments horizontaux
lines(X, Y2, col='green')
n = 50
p = 0.4
X <- 0:n
# Calcul des probabilités pour la distribution binomiale et la distribution normale
Y1 <- dbinom(X, n, p)  # Probabilités de la distribution binomiale
Y2 <- dnorm(X, n*p, sqrt(n*p*(1-p)))  # Probabilités de la distribution normale
# Trace la distribution binomiale en segments horizontaux
plot(X, Y1, type='h', main='Poisson et Binomiale', add=TRUE, col='red')
# Trace la distribution normale en segments horizontaux
lines(X, Y2, col='green')
#Compraison entre Xn ~ B(n,p) et Y ~ N(0,1)
# (Xn -np)/ sqrt(np(1-p))  ~ Y    avec n grand
plot(X,(pbinom(x,0,1)),add=TRUE)
n = 50
p = 0.4
X <- 0:n
e = n*p
v = n*p*(1-p)
Yn = (dbinom(X,n,p) - n*p) / sqrt(n*p*(1-p))
plot(X,Yn,type="h",add=TRUE)
lines(X,dnorm(X),n,p)
n = 50
p = 0.4
X <- 0:n
e = n*p
v = n*p*(1-p)
Yn = (dbinom(X,n,p) - n*p) / sqrt(n*p*(1-p))
plot(X,Yn,type="h",add=TRUE,col='red')
lines(X,dnorm(X),n,p,col='green')
#Compraison entre Xn ~ B(n,p) et Y ~ N(0,1)
n = 50
p = 0.4
X <- 0:n
e = n*p
v = n*p*(1-p)
Yn = (dbinom(X,n,p) - n*p) / sqrt(n*p*(1-p))
plot(X,Yn,type="h",add=TRUE,col='red')
n = 50
p = 0.4
X <- 0:n
e = n*p
v = n*p*(1-p)
Yn = (dbinom(X,n,p) - n*p) / sqrt(n*p*(1-p))
plot(X,Yn,type="h",add=TRUE,col='red')
lines(X,dnorm(X),n,p,col='green')
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='red')
lines(X,dnorm(X),n,p,col='green')
n = 50
p = 0.4
X <- 0:n
e = n*p
v = n*p*(1-p)
Yn = (dbinom(X,n,p) + n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='red')
lines(X,dnorm(X),n,p,col='green')
n = 50
p = 0.4
X <- 0:n
e = n*p
v = n*p*(1-p)
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='red')
lines(X,dnorm(X),n,p,col='green')
n = 50
p = 0.4
X <- 0:n
e = n*p
v = n*p*(1-p)
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='red')
lines(X,dnorm(X),col='green')
lines(X,dnorm(X),col='green')
n = 50
p = 0.4
X <- 0:n
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='red')
#Compraison entre Xn ~ B(n,p) et Y ~ N(0,1)
n = 50
p = 0.4
X <- 0:n
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='red')
plot(X,Yn,type="h",add=TRUE,col='blue')
Yn = (dbinom(X,n,p) + n*p) / (sqrt(n*p*(1-p)))
Yn = (dbinom(X,n,p) + n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
n = 50
p = 0.4
X <- 0:n
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
n = 50
p = 0.4
X <- -n:n
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
n = 50
p = 0.4
X <- 0:n
Yn = (dbinom(X,n,p) - n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
Yn = dbinom(X,n,p)*sqrt(n*p*(1-p)) + n*p
plot(X,Yn,type="h",add=TRUE,col='blue')
Yn = (dbinom(X,n,p)- n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
n = 50
p = 0.4
X <- -50:50
Yn = (dbinom(X,n,p)- n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='green')
n = 50
p = 0.4
X <- (-50):50
Yn = (dbinom(X,n,p)- n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='green')
#Compraison entre Xn ~ B(n,p) et Y ~ N(0,1)
X <- (-50):50
n = 50
p = 0.4
Yn = (dbinom(X,n,p)- n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='green')
X <- (-50):50
n = 50
p = 0.4
Yn = (dnorm(X,n,p)- n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='green')
X <- -20:20
n = 50
p = 0.4
Yn = (dnorm(X,n,p)- n*p) / (sqrt(n*p*(1-p)))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='green')
X <- -20:20
n = 50
p = 0.4
# Pour ça faut faire des réalisation avec rbinom!!!!!
X1 = X*sqrt(n*p*(1-p)) + n*p
Yn = (pbinom(X1,n,p))
plot(X,Yn,type="h",add=TRUE,col='blue')
n = 50
p = 0.4
X <- 0:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
X1 = X*sqrt(n*p*(1-p)) + n*p
Yn = (pbinom(X1,n,p))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='green')
n = 50
p = 0.4
X <- 0:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
X1 = X*sqrt(n*p*(1-p)) + n*p
Yn = (pbinom(X1,n,p))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='green')
n = 50
p = 0.4
X <- 0:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
Yn = (pbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='green')
n = 50
p = 0.4
X <- 0:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
Yn = (pbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='red')
n = 50
p = 0.4
X <- 0:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
Yn = pbinom(X*sqrt(n*p*(1-p)) + n*p,n,p)
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='red')
n = 50
p = 0.4
X <- -n:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
Yn = pbinom(X*sqrt(n*p*(1-p)) + n*p,n,p)
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='red')
Yn1 = (dbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn1,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='red')
Yn1 = (dbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn1,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='red')
Yn1 = (dbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn1,type="h",ylim=0.1,add=TRUE,col='blue')
Yn1 = (dbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
Yn1 = (dbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn1,type="h",ylim=0.1,add=TRUE,col='blue')
n = 50
p = 0.4
X <- -n:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
Yn = pbinom(X*sqrt(n*p*(1-p)) + n*p,n,p)
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='red')
Yn1 = (dbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn1,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='red')
n = 50
p = 0.4
X <- -n:n
# Pour ça faut faire des réalisation avec rbinom!!!!!
Yn = pbinom(X*sqrt(n*p*(1-p)) + n*p,n,p)
plot(X,Yn,type="h",add=TRUE,col='blue')
lines(X,pnorm(X),col='red')
Yn1 = (dbinom(X*sqrt(n*p*(1-p)) + n*p,n,p))
plot(X,Yn1,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='red')
Yn1 = (dbinom(floor(X*sqrt(n*p*(1-p))) + n*p,n,p))
plot(X,Yn1,type="h",add=TRUE,col='blue')
lines(X,dnorm(X),col='red')
a=0
b=25
x = runif(25,0,25)
plot(x,dunif(x, a, b))
a=0
b=25
x = 0:25
plot(x,dunif(x, a, b))
plot(x,punif(x, a, b))
a=0
b=25
x = 0:25
plot(x,punif(x, a, b),type="l")
a=0
b=25
x = -1:26
plot(x,punif(x, a, b),type="l")
a=0
b=25
x = -5:30
plot(x,punif(x, a, b),type="l")
2**2
# Probabilité
p <- 0.6
# Utiliser qnorm pour trouver la valeur correspondante
L <- qexp(p)
cat("La durée de vie L à laquelle un composant a 60 % de chances de dépasser est d'environ", L, "années.\n")
p <- 0.6
# Utiliser qnorm pour trouver la valeur correspondante
L <- qexp(p,0.4)
cat("La durée de vie L à laquelle un composant a 60 % de chances de dépasser est d'environ", L, "années.\n")
p <- 0.6
# Utiliser qnorm pour trouver la valeur correspondante
L <- qexp(p)
cat("La durée de vie L à laquelle un composant a 60 % de chances de dépasser est d'environ", L, "années.\n")
# Utiliser qnorm pour trouver la valeur correspondante
L <- qexp(p)
L
# Définir la plage de valeurs de t
t <- seq(0, 5, by = 0.1)
# Calculer la fonction de répartition F(t)
F_t <- pexp(t)
# Tracer la fonction de répartition
plot(t, F_t, type = "l", col = "blue", xlab = "t", ylab = "F(t)", main = "Fonction de répartition F(t)")
p <- 0.4
# Utiliser qnorm pour trouver la valeur correspondante
L <- qexp(p,1)
cat("La durée de vie L à laquelle un composant a 60 % de chances de dépasser est d'environ", L, "années.\n")
# Probabilité
p <- 0.4
# Utiliser qnorm pour trouver la valeur correspondante
L <- qexp(p,1)
cat("La durée de vie L à laquelle un composant a 60 % de chances de dépasser est d'environ", L, "années.\n")
t <- seq(0, 5, by = 0.1)
plot(t,pexp(t))
plot(t,pexp(t))
t <- seq(0, 5, by = 0.1)
plot(t,pexp(t),col="red")
plot(t,pexp(t,L),col="red")
p <- 0.4
# Utiliser qnorm pour trouver la valeur correspondante
L <- qexp(p,1)
cat("La durée de vie L à laquelle un composant a 60 % de chances de dépasser est d'environ", L, "années.\n")
t <- seq(0, 5, by = 0.1)
plot(t,pexp(t),col="red")
F_1 = function(y,lambda){
return -1/lambda*log(1-y)
}
X = rexp(100)
X1 = F_1(X,5)
F_1 = function(y,lambda){
return (-1/lambda)*log(1-y)
}
X = rexp(100)
X1 = F_1(X,5)
plot(X1,pexp(X1),col="blue")
n=50
X = rexp(n)
X1 = F_1(X,5)
plot(X1,pexp(X1),col="blue")
F_1 = function(y,lambda){
return (-1/lambda)*log(1-y)
}
n=50
X = rexp(n)
X1 = F_1(X,5)
hist(X1,pexp(X1),col="blue")
F_1 = function(y,lambda){
return (-1/lambda)*log(1-y)
}
n=50
X = rexp(n)
X1 = F_1(X,5)
plot(X1,pexp(X1),col="blue")
n=50
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="blue")
n=1000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="blue")
n=10000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="blue")
n=100
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="blue")
n=500
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="blue")
n=500
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="blue")
#densité unif
Y1 = punif(X)
plot(X,Y1)
n=500
X = rexp(n)
Y = pexp(X)
Y1 = punif(X)
hist(Y,proba=T,col="blue",add=TRUE)
lines(X,Y1)
n=500
X = rexp(n,1)
Y = pexp(X)
Y1 = punif(X)
hist(Y,proba=T,col="blue",add=TRUE)
lines(X,Y1)
n=500
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="blue",add=TRUE)
curve(punif(X))
n=500
X = rexp(n,1)
Y = pexp(X)
hist(Y,proba=T,col="blue",add=TRUE)
curve(punif(X))
n=500
X = rexp(n,1)
Y = pexp(X)
hist(Y,proba=T,col="blue",add=TRUE)
lines(punif(X))
n=500
X = rexp(n,1)
Y = pexp(X)
hist(Y,proba=T,col="blue",add=TRUE)
curves(punif(X))
n=500
X = rexp(n,1)
Y = pexp(X)
hist(Y,proba=T,col="blue",add=TRUE)
curve(dunif(X))
n=500
X = rexp(n,1)
Y = pexp(X)
hist(Y,proba=T,col="blue",add=TRUE)
curve(dunif(X),col="red")
n=500
X = rexp(n,1)
Y = pexp(X)
hist(Y,proba=T,col="green",add=TRUE)
curve(dunif(X),col="red")
n=500
X = rexp(n,1)
Y = pexp(X)
hist(Y,proba=T,col="green",add=TRUE)
curve(dunif(X),col="red")
n=500
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green",add=TRUE)
n=500
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green",add=TRUE)
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green",add=TRUE)
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green",add=TRUE)
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green",add=TRUE)
hist(Y,proba=T,col="green")
curve(dunif(X),col="red")
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green")
curve(dunif(X,-n,n),col="red")
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green")
curve(dunif(X,0,1),col="red")
curve(dunif(X,0,1),col="red")
plot(dunif(X,0,1),col="red")
lines(dunif(X,0,1),col="red")
curve(dunif(X,0,1),col="red")
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green")
curve(dunif(X,0,1),col="red")
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green")
curve(dunif(X,0,1),col="red")
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green")
curve(dunif(X,0,1),col="red")
help(curve)
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green")
curve(dunif,col="red")
qnorm(pnorm(a)-pnorm(-a))
(qnorm(pnorm(a)-pnorm(-a))= 0.9)
qnorm(pnorm(a)-pnorm(-a),0.9)
n=2000
X = rexp(n)
Y = pexp(X)
hist(Y,proba=T,col="green")
curve(dunif,col="red")
n = 100
X = 1:20
plot(X,dchisq(X,n))
n = 100
X = 1:20
plot(X,dchisq(X,n),type= 's')
n = 100
X = 1:20
plot(X,dchisq(X,n),type= 'h')
n = 10
X = 1:20
plot(X,dchisq(X,n),type= 'h')
n = 10
X = 1:20
plot(X,dchisq(X,n))
n = 10
X = 1:20
plot(X,dchisq(X,n),type='l')
n = 100
X = 1:20
plot(X,dchisq(X,n),type='l')
n = 10000000
X = 1:20
plot(X,dchisq(X,n),type='l')
n = 100
X = 1:20
plot(X,dchisq(X,n),type='l')
n = 100
X = 1:20
plot(X,dchisq(X,n),type='l')
n = 10
X = 1:20
plot(X,dchisq(X,n),type='l')
setwd("C:/Users/Khadija Oualla/Desktop/M1_SSD/Logiciel Spécialisé R/Application RShiny")
library(shiny); runApp('myapp/Shiny3.R')
runApp('myapp/Shiny3.R')
runApp('myapp/Shiny3.R')
